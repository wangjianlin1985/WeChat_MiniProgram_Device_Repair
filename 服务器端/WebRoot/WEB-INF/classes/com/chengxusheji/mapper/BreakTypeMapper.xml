<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.BreakTypeMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加故障类型记录 -->
	<insert id="addBreakType" parameterType="breakType">
		insert into t_breakType(breakTypeName) values 
		(#{breakTypeName})
	</insert>

	<!-- 按照查询条件分页查询故障类型记录 -->
	<select id="queryBreakType" resultMap="breakTypeMap" >
		select t_breakType.* from t_breakType ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="breakTypeMap" type="breakType">
        <id property="breakTypeId" column="breakTypeId" />
    </resultMap>

    <!-- 按照查询条件查询所有故障类型记录 -->
	<select id="queryBreakTypeList" resultMap="breakTypeMap" >
		select t_breakType.* from t_breakType ${where}
	</select>

    <!-- 按照查询条件的故障类型记录数 -->
	<select id="queryBreakTypeCount" resultType="int">
		select count(*) from t_breakType ${where}
	</select>

	<!-- 根据主键查询某个故障类型记录 -->
	<select id="getBreakType" parameterType="int" resultMap="breakTypeMap">
		select * from t_breakType where t_breakType.breakTypeId = #{breakTypeId}
	</select>

	<!-- 更新故障类型记录 -->
	<update id="updateBreakType" parameterType="breakType">
		update t_breakType set breakTypeName=#{breakTypeName} where breakTypeId = #{breakTypeId}
	</update>

	<!-- 删除故障类型记录 -->
	<delete id="deleteBreakType" parameterType="int">
		delete from t_breakType where breakTypeId=#{breakTypeId}
	</delete>

</mapper>
